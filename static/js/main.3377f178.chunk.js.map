{"version":3,"sources":["utils/noop.js","components/loader/index.js","utils/withSuspense.js","utils/transformData.js","utils/persist.js","utils/helpers.js","store/state/index.js","utils/fetch/requestStore.js","utils/fetch/errorHandler.js","constants/api.js","utils/fetch/index.js","store/actions/index.js","store/index.js","assets/code.jpg","assets/poster.jpg","pages/body/index.js","components/link/index.js","components/searchForm/index.js","components/navbar/index.js","pages/header/index.js","layout/index.js","app.js","serviceWorker.js","index.js","configs/index.js"],"names":["noop","Loader","withSuspense","Component","props","fallback","transformData","id","videos","overview","popularity","vote_count","poster_path","release_date","backdrop_path","isFavorites","voteCount","title","original_title","releaseDate","poster","baseUrlImg","img","backdrop","loadState","key","serializedState","localStorage","getItem","JSON","parse","err","saveState","state","stringify","setItem","getTitle","str","length","slice","getItemByKey","data","compare","find","item","getIndexByKey","findIndex","saveFavorites","favorites","getPersistFavoritesData","persistData","forEach","idx","initialState","logout","totalPages","searchResult","searchTotalPages","RequestStore","hash","stack","has","request","set","get","delete","Map","errorHandler","response","status","store","isLoggedIn","actions","getMoviesVideo","baseUrl","segmentKey","getMovies","page","cetrificate","makeUnique","url","method","appKey","Fetch","promises","map","Promise","all","then","i","results","cachableRequest","clone","json","result","headers","fetch","drop","getData","a","total_pages","getMergeData","mergeData","setFavorites","newFavorite","removeFavorites","dataIndex","favoriteIndex","splice","getSearchMovies","value","name","createOvermind","useStore","createHook","module","exports","lazy","Link","to","label","className","SearchForm","useState","setValue","history","useHistory","onSubmit","event","preventDefault","trim","push","type","onChange","target","placeholder","Navbar","isVisible","setIsVisivle","onClick","classNames","collapse","Header","Layout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","process","REACT_APP_BASE_URL","REACT_APP_SEGMENT_KEY","REACT_APP_CERTIFICATE","REACT_APP_BASE_URL_IMG","REACT_APP_BASE_URL_VIDEO","baseUrlVideo"],"mappings":"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","file":"static/js/main.3377f178.chunk.js","sourcesContent":["const noop = () => {};\n\nexport default noop;\n","import React from 'react';\n\nconst Loader = () => (\n  <div>\n    <h5>Loading</h5>\n  </div>\n);\n\nexport default Loader;\n","import React, { Suspense } from 'react';\n\nimport Loader from 'components/loader';\n\nconst withSuspense = Component => props => (\n  <Suspense fallback={<Loader />}>\n    <Component {...props} />\n  </Suspense>\n);\n\nexport default withSuspense;\n","import { baseUrlImg } from 'configs';\n\nimport img from 'assets/code.jpg';\nimport poster from 'assets/poster.jpg';\n\nconst transformData = ({\n  id,\n  videos,\n  overview,\n  popularity,\n  vote_count,\n  poster_path,\n  release_date,\n  backdrop_path,\n  original_title,\n}) => ({\n  id,\n  videos,\n  overview,\n  popularity,\n  isFavorites: false,\n  voteCount: vote_count,\n  title: original_title,\n  releaseDate: release_date,\n  poster: poster_path ? `${baseUrlImg}${poster_path}` : img,\n  backdrop: backdrop_path ? `${baseUrlImg}${backdrop_path}` : poster,\n});\n\nexport default transformData;\n","const loadState = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return\n  }\n}\n\nconst saveState = (key, state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(key, serializedState);\n  } catch (err) {\n\n  }\n}\n\nexport {\n  loadState,\n  saveState,\n}\n","import { saveState, loadState } from 'utils';\n\nconst getTitle = str => str.length > 21 ? `${str.slice(0, 18)}...` : str;\nconst getItemByKey = (data, key, compare) => data.find(item => item[key] === compare);\nconst getIndexByKey = (data, key, compare) => data.findIndex(item => item[key] === compare);\nconst saveFavorites = favorites => saveState('favorites', favorites);\n\nconst getPersistFavoritesData = data => {\n  const persistData = loadState('favorites');\n  persistData && persistData.forEach(({ id }) => {\n    const idx = getIndexByKey(data, 'id', id);\n    if (idx !== -1) {\n      data[idx].isFavorites = true\n    }\n  });\n  return data\n}\n\nexport {\n  getTitle,\n  getItemByKey,\n  getIndexByKey,\n  saveFavorites,\n  getPersistFavoritesData,\n}\n","const initialState = {\n  data: [],\n  logout: null,\n  favorites: [],\n  totalPages: 0,\n  searchResult: [],\n  searchTotalPages: 0,\n};\n\nexport default initialState;\n","class RequestStore {\n  static stack = new Map();\n\n  static has(hash) {\n    return RequestStore.stack.has(hash);\n  }\n\n  static set(hash, request) {\n    if (!RequestStore.has(hash)) {\n      RequestStore.stack.set(hash, request);\n    }\n  }\n\n  static get(hash) {\n    if (RequestStore.has(hash)) {\n      return RequestStore.stack.get(hash);\n    }\n  }\n\n  static drop(hash) {\n    if (RequestStore.has(hash)) {\n      RequestStore.stack.delete(hash);\n    }\n  }\n}\n\nexport default RequestStore;\n","import { store } from 'store';\n\nconst errorHandler = response => {\n  // TODO::: add chack for bad request\n  if (response.status === 401) {\n    store.state.isLoggedIn !== false && store.actions.logout();\n  }\n  return response;\n};\n\nexport default errorHandler;\n","import {\n  baseUrl,\n  segmentKey,\n  cetrificate,\n  baseUrlVideo,\n} from 'configs';\n\nconst getVideoSrc = videoKey => `${baseUrlVideo}${videoKey}`;\nconst getMoviesById = id => `${baseUrl}/movie/${id}?api_key=${segmentKey}`;\nconst getMoviesVideo = (id) => `${baseUrl}/movie/${id}/videos?api_key=${segmentKey}`;\nconst getMovies = page => `${baseUrl}/discover/movie?api_key=${segmentKey}${cetrificate}${page}`;\nconst getMoviesByName = (name, page) =>\n  `${baseUrl}/search/movie?api_key=${segmentKey}&query=${name}&page=${page}`;\n\nexport {\n  getMovies,\n  getVideoSrc,\n  getMoviesById,\n  getMoviesVideo,\n  getMoviesByName,\n};\n","import { appKey } from 'configs';\nimport RequestStore from './requestStore';\nimport errorHandler from './errorHandler';\nimport { getMoviesVideo } from 'constants/api';\n\nconst makeUnique = (url, method, appKey) => `${url}-${method}-${appKey}`;\n\nclass Fetch {\n  static async get(url) {\n    return Fetch.request(url, 'GET');\n  }\n\n  static async getMergeData(data) {\n    const promises = data.map(({ id }) => Fetch.request(getMoviesVideo(id), 'GET'));\n    await Promise.all(promises)\n      .then(videos => {\n        videos.forEach(({ results }, i) => {\n          data[i].videos = results;\n        })\n      });\n    return data;\n  }\n\n  static async request(url, method) {\n    const response = await Fetch.cachableRequest(url, method);\n\n    const result = await response.clone().json();\n\n    return {\n      headers: response.headers,\n      ...result,\n    };\n  }\n\n  static async cachableRequest(url, method) {\n    const hash = makeUnique(url, method, appKey);\n    const request = RequestStore.has(hash) ? RequestStore.get(hash) : fetch(url);\n\n    RequestStore.set(hash, request);\n\n    const response = await request;\n\n    RequestStore.drop(hash);\n\n    return errorHandler(response);\n  }\n}\n\nexport default Fetch;\n","import Fetch from 'utils/fetch';\nimport { getMovies, getMoviesByName } from 'constants/api';\nimport {\n  loadState,\n  getItemByKey,\n  transformData,\n  getIndexByKey,\n  saveFavorites,\n  getPersistFavoritesData,\n} from 'utils';\n\nconst getData = async ({ state }, page) => {\n  const { results, total_pages } = await Fetch.get(getMovies(page));\n  const mergeData = await Fetch.getMergeData(results);\n  const data = mergeData.map(item => transformData(item));\n\n  state.totalPages = total_pages;\n  state.data = getPersistFavoritesData(data);\n  state.favorites = loadState('favorites') || [];\n};\n\nconst setFavorites = ({ state }, id) => {\n  const favorite = getItemByKey(state.favorites, 'id', id);\n  if(favorite) return;\n\n  const newFavorite = getItemByKey(state.data, 'id', id);\n  newFavorite.isFavorites = true;\n  state.favorites = [...state.favorites, newFavorite];\n  saveFavorites(state.favorites);\n}\n\nconst removeFavorites = ({ state }, id) => {\n  const newFavorite = [...state.favorites];\n  const dataIndex = getIndexByKey(state.data, 'id', id);\n  const favoriteIndex = getIndexByKey(state.favorites, 'id', id);\n\n  if(state.data[dataIndex]) {\n    state.data[dataIndex].isFavorites = false;\n  }\n  \n  newFavorite.splice(favoriteIndex, 1);\n  state.favorites = newFavorite;\n  saveFavorites(state.favorites);\n}\n\nconst getSearchMovies = async ({ state }, { value, id }) => {\n  const { results, total_pages } = await Fetch.get(getMoviesByName(value, id));\n  const data = results.map(item => transformData(item));\n  const mergeData = await Fetch.getMergeData(data);\n  \n  state.searchResult = mergeData;\n  state.searchTotalPages = total_pages;\n}\n\nconst logout = ({ state }) => {\n  state.logout = false;\n};\n\nexport default {\n  logout,\n  getData,\n  setFavorites,\n  removeFavorites,\n  getSearchMovies,\n};\n","import { createOvermind } from 'overmind';\nimport { createHook } from 'overmind-react';\n\nimport initialState from './state';\nimport actions from './actions';\n\nexport const store = createOvermind({\n  state: initialState,\n  actions,\n});\n\nexport const useStore = createHook();\n","module.exports = __webpack_public_path__ + \"static/media/code.192f4687.jpg\";","module.exports = __webpack_public_path__ + \"static/media/poster.4a2bbc08.jpg\";","import { lazy } from 'react';\nimport { withSuspense } from 'utils';\n\nexport default withSuspense(lazy(() => import('./body')));\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Link = ({ to, label }) => (\n  <li className=\"nav-item\">\n    <NavLink to={to} className=\"nav-link\">\n      {label}\n    </NavLink>\n  </li>\n);\n\nexport default Link;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { useStore } from 'store';\n\nfunction SearchForm() {\n  const [value, setValue] = useState('');\n  const { actions: { getSearchMovies } } = useStore();\n  const history = useHistory();\n\n  const handleChange = ({ target: { value } }) => setValue(value);\n  \n  const handleSubmit = event => {\n    event.preventDefault();\n    if(value.trim().length === 0) {\n      return;\n    }\n    getSearchMovies({ value, id: 1 });\n    setValue('');\n    history.push('/search');\n  }\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      className=\"form-inline my-2 my-lg-0\"\n    >\n      <input\n        type=\"text\"\n        value={value}\n        onChange={handleChange}\n        placeholder=\"Search\"\n        className=\"form-control mr-sm-2\"\n      />\n      <button \n        type=\"submit\"\n        className=\"btn btn-secondary my-2 my-sm-0\"\n      >\n        Search\n      </button>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport Link from 'components/link'\nimport SearchForm from 'components/searchForm';\n\nfunction Navbar() {\n  const [isVisible, setIsVisivle] = useState(false);\n  const showMenuHandler = () => setIsVisivle(!isVisible);\n\n  return (\n    <nav className=\"navbar navbar-expand-lg fixed-top navbar-dark bg-dark\">\n      <div className=\"container\">\n        <span className=\"navbar-brand\">\n          Search Movies\n        </span>\n        <button className=\"navbar-toggler\" onClick={showMenuHandler}>\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className={classNames('navbar-collapse', { collapse: !isVisible })}>\n          <ul className=\"navbar-nav mr-auto\">\n            <Link to=\"/movies\" label=\"Movies\" />\n            <Link to=\"/favorites\" label=\"Favorites\" />\n          </ul>\n          <SearchForm />\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\n\nimport Navbar from 'components/navbar';\n\nconst  Header = () => {\n  return (\n    <header>\n      <Navbar />\n    </header>\n  )\n};\n\nexport default Header;","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Body from 'pages/body';\nimport Header from 'pages/header';\n\nconst Layout = () => {\n  return (\n    <BrowserRouter>\n      <Header />\n      <Body />\n    </BrowserRouter>\n  );\n}\n\nexport default Layout;\n","import React from 'react';\nimport { Provider } from 'overmind-react'\n\nimport Layout from 'layout';\nimport { store } from 'store';\n\nfunction App() {\n  return (\n    <Provider value={store}>\n      <Layout />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'app';\nimport * as serviceWorker from 'serviceWorker';\n\nimport 'index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const {\n  REACT_APP_BASE_URL,\n  REACT_APP_SEGMENT_KEY,\n  REACT_APP_CERTIFICATE,\n  REACT_APP_BASE_URL_IMG,\n  REACT_APP_BASE_URL_VIDEO,\n} = process.env;\n\nconst appKey = 'movies';\nconst baseUrl = REACT_APP_BASE_URL;\nconst segmentKey = REACT_APP_SEGMENT_KEY;\nconst cetrificate = REACT_APP_CERTIFICATE;\nconst baseUrlImg = REACT_APP_BASE_URL_IMG;\nconst baseUrlVideo = REACT_APP_BASE_URL_VIDEO;\n\nexport {\n  appKey,\n  baseUrl,\n  segmentKey,\n  baseUrlImg,\n  cetrificate,\n  baseUrlVideo,\n}\n"],"sourceRoot":""}